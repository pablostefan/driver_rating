// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import '../entities/driver.dart';
import '../entities/rating.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 9022905674158398983),
      name: 'Driver',
      lastPropertyId: const IdUid(4, 3407213883869360224),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5705612719598315575),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6745011475452770153),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2601073428746723794),
            name: 'photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3407213883869360224),
            name: 'rated',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'ratings', srcEntity: 'Rating', srcField: 'driver')
      ]),
  ModelEntity(
      id: const IdUid(2, 6157441081973543229),
      name: 'Rating',
      lastPropertyId: const IdUid(6, 80748787247915677),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6548787931967023212),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4334938094802856387),
            name: 'rating',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3366186930239339761),
            name: 'comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6643342685969791546),
            name: 'userRating',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6200805799948864799),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 80748787247915677),
            name: 'driverId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 1735008521340885622),
            relationTarget: 'Driver')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6157441081973543229),
      lastIndexId: const IdUid(1, 1735008521340885622),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Driver: EntityDefinition<Driver>(
        model: _entities[0],
        toOneRelations: (Driver object) => [],
        toManyRelations: (Driver object) => {
              RelInfo<Rating>.toOneBacklink(
                      6, object.id, (Rating srcObject) => srcObject.driver):
                  object.ratings
            },
        getId: (Driver object) => object.id,
        setId: (Driver object, int id) {
          object.id = id;
        },
        objectToFB: (Driver object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final photoOffset = fbb.writeString(object.photo);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, photoOffset);
          fbb.addBool(3, object.rated);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final photoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final ratedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = Driver(
              id: idParam,
              name: nameParam,
              photo: photoParam,
              rated: ratedParam);
          InternalToManyAccess.setRelInfo<Driver>(
              object.ratings,
              store,
              RelInfo<Rating>.toOneBacklink(
                  6, object.id, (Rating srcObject) => srcObject.driver));
          return object;
        }),
    Rating: EntityDefinition<Rating>(
        model: _entities[1],
        toOneRelations: (Rating object) => [object.driver],
        toManyRelations: (Rating object) => {},
        getId: (Rating object) => object.id,
        setId: (Rating object, int id) {
          object.id = id;
        },
        objectToFB: (Rating object, fb.Builder fbb) {
          final commentOffset = fbb.writeString(object.comment);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.rating);
          fbb.addOffset(2, commentOffset);
          fbb.addBool(3, object.userRating);
          fbb.addInt64(4, object.date.millisecondsSinceEpoch);
          fbb.addInt64(5, object.driver.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final ratingParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final commentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final userRatingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = Rating(
              id: idParam,
              rating: ratingParam,
              comment: commentParam,
              date: dateParam,
              userRating: userRatingParam);
          object.driver.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.driver.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Driver] entity fields to define ObjectBox queries.
class Driver_ {
  /// see [Driver.id]
  static final id = QueryIntegerProperty<Driver>(_entities[0].properties[0]);

  /// see [Driver.name]
  static final name = QueryStringProperty<Driver>(_entities[0].properties[1]);

  /// see [Driver.photo]
  static final photo = QueryStringProperty<Driver>(_entities[0].properties[2]);

  /// see [Driver.rated]
  static final rated = QueryBooleanProperty<Driver>(_entities[0].properties[3]);
}

/// [Rating] entity fields to define ObjectBox queries.
class Rating_ {
  /// see [Rating.id]
  static final id = QueryIntegerProperty<Rating>(_entities[1].properties[0]);

  /// see [Rating.rating]
  static final rating =
      QueryIntegerProperty<Rating>(_entities[1].properties[1]);

  /// see [Rating.comment]
  static final comment =
      QueryStringProperty<Rating>(_entities[1].properties[2]);

  /// see [Rating.userRating]
  static final userRating =
      QueryBooleanProperty<Rating>(_entities[1].properties[3]);

  /// see [Rating.date]
  static final date = QueryIntegerProperty<Rating>(_entities[1].properties[4]);

  /// see [Rating.driver]
  static final driver =
      QueryRelationToOne<Rating, Driver>(_entities[1].properties[5]);
}
